"use client";

import {motion} from "framer-motion";
import Link from "next/link";
import {useState} from "react";
import Image from "next/image";

interface Question {
  id: number;
  question: string;
  options: string[];
  correctAnswer: number;
  explanation?: string;
  imageUrl?: string;
  isImageOptions?: boolean; // ƒê√°nh d·∫•u n·∫øu options l√† URL h√¨nh ·∫£nh
  optionImages?: string[]; // M·∫£ng URL h√¨nh ·∫£nh cho c√°c ƒë√°p √°n
  isVideo?: boolean; // ƒê√°nh d·∫•u n·∫øu c√¢u h·ªèi c√≥ video li√™n quan
}

interface AnswerRecord {
  questionId: number;
  playerName: string;
  selectedAnswer: number;
  isCorrect: boolean;
}

const questions: Question[] = [
  {
    id: 1,
    question: "Sinh nh·∫≠t Ph·ªìn v√†o th√°ng m·∫•y?",
    options: ["A. Th√°ng 6", "B. Th√°ng 7", "C. Th√°ng 8", "D. Th√°ng 9"],
    correctAnswer: 1,
    explanation: "Ai kh√¥ng bi·∫øt n√™n v·∫Øt tay l√™n tr√°n suy nghƒ© l·∫°i "
  },
  {
    id: 2,
    question: "Anh trai Ph·ªìn n√†o h√°t hay nh·∫•t?",
    options: ["A. Anh Ch≈©ng", "B. Tu·∫•n Ch√≥", "C. BM", "D. Minh √Åi"],
    correctAnswer: 2,
    explanation: "BM h√°t hay nh·∫•t trong h·ªôi Ph·ªìn"
  },
  {
    id: 3,
    question: "Ng√†y l·∫≠p nh√≥m mess l√† ng√†y n√†o?",
    options: ["A. 29/06", "B. 30/06", "C. 01/07", "D. 02/07"],
    correctAnswer: 0,
    explanation: "Ng∆∞·ªùi n√†o tr·∫£ l·ªùi ƒë√∫ng c√¢u n√†y th·∫≠t l√† ƒë·ªânh"
  },
  {
    id: 4,
    question: "Anh trai n√†o nhi·ªát t√¨nh nh·∫•t?",
    options: ["A. Ho√†ng Tu·∫•n", "B. Tu·∫•n ·ªàn", "C. Tu·∫•n Ch√≥", "D. BM"],
    correctAnswer: 2,
    explanation: "V√¨ c√≥ m·∫∑t trong m·ªçi k√®o"
  },
  {
    id: 5,
    question: "Anh trai n√†o ƒëa c·∫•p nh·∫•t?",
    options: ["A. Tu·∫•n ·ªàn", "B. Tu·∫•n Ch√≥", "C. A Ch≈©ng", "D. Minh √Åi", "E. BM"],
    correctAnswer: 4,
    explanation: "BM d·∫°o n√†y ƒëa c·∫•p l·∫Øm"
  },
  {
    id: 6,
    question: '"They make you lose your shoes!" ƒëang n√≥i t·ªõi em xinh n√†o?',
    options: ["A. T√∫ Anh", "B. Lan", "C. Tr√∫c", "D. Th·∫£o", "E. Th∆∞"],
    correctAnswer: 3,
    explanation: "Lose shoes c√°ch ƒë·ªçc g·∫ßn gi·ªëng Loose shoes -----> ƒê√¥i gi√†y r·ªông :(((("
  },
  {
    id: 7,
    question: "Ch√∫ng ta l·∫ßn ƒë·∫ßu g·∫∑p l·∫°i nhau ·ªü ƒë√¢u?",
    options: ["A. 1196 ƒê∆∞·ªùng L√°ng", "B. 263 Quan Hoa", "C. 39 V≈© Th·∫°nh", "D. H·ªì ƒê·∫Øc Di"],
    correctAnswer: 0,
    explanation: "B·ªØa nh·∫≠u l·ªãch s·ª≠ ng√†y h√¥m ƒë√≥"
  },
  {
    id: 8,
    question: "ƒê·ªãa ƒëi·ªÉm du l·ªãch ƒë·∫ßu ti√™n m√† Ph·ªìn ƒëi",
    options: ["A. H√¨nh 1", "B. H√¨nh 2", "C. H√¨nh 3", "D. H√¨nh 4"],
    correctAnswer: 3,
    explanation: "l√†ng vƒÉn h√≥a m√†",
    isImageOptions: true,
    optionImages: [
      "/Ba v√¨.jpg",
      "/Hu·∫ø.jpg",
      "/H·∫° Long.jpg",
      "/L√†ng vƒÉn h√≥a.jpg"
    ]
  },
  {
    id: 9,
    question: "Ng∆∞·ªùi m√† Ph·ªìn tin t∆∞·ªüng nh·∫•t l√†?",
    options: ["A. Anh Ho√†ng", "B. Anh Trai Say Hi", "C. Anh L·∫°i Th·ªã", "D. Anh Ch≈©ng"],
    correctAnswer: 3,
    explanation: "V√¨ anh l√† b·∫°n c·ªßa ch√∫ng ta"
  },
  {
    id: 10,
    question: "L√∫c nghe tin T√∫ Anh ƒëi S√≥c S∆°n HT ƒëang l√†m g√¨?",
    options: ["A. Kh√≥c", "B. R√¨nh", "C. √în Thi", "D. Ng·ªß"],
    correctAnswer: 2,
    explanation: "Sau ƒë·∫•y l√† kh√≥c v√† ng·ªß thi·∫øp ƒëi( Ai tr·∫£ l·ªùi nh∆∞ n√†y cho 10 ph·∫ßn qu√†)"
  },
  {
    id: 11,
    question: "C≈©ng trong vid n√†y, ·ªü n·ª≠a cu·ªëi Tr√∫c ƒë√£ nghi ng·ªù ai?",
    options: ["A. Tu·∫•n Ch√≥", "B. Ho√†ng Tu·∫•n", "C. BM", "D. Minh √Åi"],
    correctAnswer: 1,
    explanation: "Tr√∫c nghi ng·ªù Ho√†ng Tu·∫•n",
    imageUrl: "https://drive.google.com/file/d/11zyn_hiFVJK-zL6XYwU0tdTXMk7Q9R57/view",
    isVideo: true
  },
  {
    id: 12,
    question: "K·∫øt th√∫c chuy·∫øn ƒëi Hu·∫ø-ƒê√† N·∫µng cta ƒë√£ mua l∆∞u ni·ªám ·ªü ƒë√¢u?",
    options: ["A. Ch·ª£ ƒê√† N·∫µng", "B. Ch·ª£ B·∫Øc M·ªπ An", "C. Ch·ª£ H√†n", "D. Ch·ª£ C·ªìn"],
    correctAnswer: 1,
    explanation: "Ch√∫ng ta mua qu√† ·ªü Ch·ª£ B·∫Øc M·ªπ An"
  },
  {
    id: 13,
    question: "T·ªïng s·ªë ti·ªÅn m√† cta ƒë√£ mua qu√† l√† bao nhi√™u?",
    options: ["A. 3000k", "B. 3500k", "C. 4080k", "D. 4500k"],
    correctAnswer: 2,
    explanation: "T·ªïng c·ªông 4080k"
  },
  {
    id: 14,
    question: "B·∫°n th√≠ch k·ªâ ni·ªám n√†o v·ªõi Ph·ªìn nh·∫•t, T·∫°i Sao?",
    options: ["A. ", "B. ", "C. ", "D. "],
    correctAnswer: 3,
    explanation: "M·ªói k·ªâ ni·ªám ƒë·ªÅu ƒë·∫πp v√† √Ω nghƒ©a"
  },
  {
    id: 15,
    question: "Trong video n√†y c·ªßa Ph·ªìn, c√≥ bao nhi√™u ng∆∞·ªùi m·∫∑c √°o ƒëen?",
    options: ["A. 2 ng∆∞·ªùi", "B. 3 ng∆∞·ªùi", "C. 4 ng∆∞·ªùi", "D. 5 ng∆∞·ªùi"],
    correctAnswer: 1,
    imageUrl:"https://drive.google.com/file/d/11zyn_hiFVJK-zL6XYwU0tdTXMk7Q9R57/view",
    isVideo: true,
    explanation: "C√≥ 3 ng∆∞·ªùi m·∫∑c √°o ƒëen"
  },
  {
    id: 16,
    question: "Anh trai n√†o nhi·ªÅu t·∫ø nh·∫•t?",
    options: ["A. Tu·∫•n ·ªàn", "B. Tu·∫•n Ch√≥", "C. A Ch≈©ng", "D. Minh √Åi"],
    correctAnswer: 0,
    explanation: "Ch·ªâ c√≥ 1 ƒë√°p √°n l√† con l·ª£n"
  },
  {
    id: 17,
    question: "H√¨nh ·∫£nh n√†y li√™n t∆∞·ªüng t·ªõi ai?",
    options: ["A. T√∫ Anh", "B. Lan", "C. Tr√∫c", "D. Th·∫£o"],
    correctAnswer: 0,
    explanation: "ƒê√¢y l√† h√¨nh ·∫£nh li√™n t∆∞·ªüng ƒë·∫øn T√∫ Anh",
    imageUrl: "/M√°y s·∫•y t√≥c.webp"
  },
  {
    id: 18,
    question: "Con s·ªë 06 li√™n t∆∞·ªüng t·ªõi anh trai n√†o?",
    options: ["A. Tu·∫•n ·ªàn", "B. Tu·∫•n Ch√≥", "C. A Ch≈©ng", "D. Minh √Åi", "E. BM"],
    correctAnswer: 2,
    explanation: "31/03/2025"
  }
];

export default function QuestionsPage() {
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [selectedAnswer, setSelectedAnswer] = useState<number | null>(null);
  const [showExplanation, setShowExplanation] = useState(false);
  const [showNameInput, setShowNameInput] = useState(false);
  const [currentPlayerName, setCurrentPlayerName] = useState("");
  const [isQuizComplete, setIsQuizComplete] = useState(false);
  const [answerRecords, setAnswerRecords] = useState<AnswerRecord[]>([]);

  const handleAnswerClick = (answerIndex: number) => {
    if (selectedAnswer !== null) return; // Already answered

    setSelectedAnswer(answerIndex);
    setShowExplanation(true);
    setShowNameInput(true);
  };

  const handleSubmitName = () => {
    if (!currentPlayerName.trim() || selectedAnswer === null) return;

    const isCorrect = selectedAnswer === questions[currentQuestion].correctAnswer;

    // Record the answer with player name
    const newRecord: AnswerRecord = {
      questionId: currentQuestion,
      playerName: currentPlayerName.trim(),
      selectedAnswer: selectedAnswer,
      isCorrect: isCorrect
    };

    setAnswerRecords([...answerRecords, newRecord]);

    // Move to next question or complete quiz
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
      setSelectedAnswer(null);
      setShowExplanation(false);
      setShowNameInput(false);
      setCurrentPlayerName("");
    } else {
      setIsQuizComplete(true);
    }
  };

  const handleRestart = () => {
    setCurrentQuestion(0);
    setSelectedAnswer(null);
    setShowExplanation(false);
    setShowNameInput(false);
    setCurrentPlayerName("");
    setIsQuizComplete(false);
    setAnswerRecords([]);
  };

  const getTotalScore = () => {
    return answerRecords.filter(r => r.isCorrect).length;
  };

  const getPlayerStats = () => {
    const playerMap = new Map<string, { correct: number; total: number; questions: number[] }>();

    answerRecords.forEach(record => {
      if (!playerMap.has(record.playerName)) {
        playerMap.set(record.playerName, {correct: 0, total: 0, questions: []});
      }
      const stats = playerMap.get(record.playerName)!;
      stats.total += 1;
      stats.questions.push(record.questionId + 1);
      if (record.isCorrect) {
        stats.correct += 1;
      }
    });

    return Array.from(playerMap.entries()).map(([name, stats]) => ({
      name,
      correct: stats.correct,
      total: stats.total,
      percentage: (stats.correct / stats.total) * 100,
      questions: stats.questions
    }));
  };

  if (isQuizComplete) {
    const totalScore = getTotalScore();
    const percentage = (totalScore / questions.length) * 100;
    const playerStats = getPlayerStats();

    return (
      <div className="font-sans min-h-screen p-8 pb-20 sm:p-20 bg-transparent">
        <main className="max-w-4xl mx-auto">
          <Link href="/event/20-10-2025" className="inline-block mb-8 text-purple-600 hover:underline">
            ‚Üê Quay l·∫°i Thi·ªáp m·ªùi
          </Link>

          <motion.div
            className="relative bg-white border-2 border-pink-300 rounded-3xl p-8 md:p-12 shadow-2xl mb-8"
            initial={{opacity: 0, scale: 0.9}}
            animate={{opacity: 1, scale: 1}}
            transition={{duration: 0.6}}
          >
            <div className="text-center">
              <motion.div
                className="text-8xl mb-6"
                initial={{scale: 0}}
                animate={{scale: 1}}
                transition={{delay: 0.3, type: "spring", stiffness: 200}}
              >
                üéâ
              </motion.div>

              <h1
                className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent mb-4">
                Ho√†n th√†nh!
              </h1>

              <div className="text-6xl font-bold text-pink-600 mb-2">
                {totalScore}/{questions.length}
              </div>

              <div className="text-2xl text-gray-600 mb-6">
                {percentage.toFixed(0)}% ch√≠nh x√°c
              </div>

              <p className="text-xl text-gray-700 mb-8">
                C·∫£m ∆°n m·ªçi ng∆∞·ªùi ƒë√£ tham gia! üéä
              </p>

              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <button
                  onClick={handleRestart}
                  className="px-8 py-4 bg-gradient-to-r from-pink-500 to-purple-600 text-white font-bold text-lg rounded-full shadow-lg hover:shadow-xl hover:from-pink-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105"
                >
                  üîÑ Ch∆°i l·∫°i
                </button>
                <Link
                  href="/event/20-10-2025"
                  className="px-8 py-4 bg-white border-2 border-pink-500 text-pink-600 font-bold text-lg rounded-full shadow-lg hover:shadow-xl hover:bg-pink-50 transition-all duration-300 transform hover:scale-105"
                >
                  üìã V·ªÅ trang thi·ªáp m·ªùi
                </Link>
              </div>
            </div>
          </motion.div>

          {/* Player Statistics */}
          <motion.div
            className="bg-white border-2 border-purple-200 rounded-3xl p-8 md:p-12 shadow-2xl mb-8"
            initial={{opacity: 0, y: 20}}
            animate={{opacity: 1, y: 0}}
            transition={{duration: 0.6, delay: 0.3}}
          >
            <h2 className="text-3xl font-bold text-purple-700 mb-6 text-center">
              üë• Th·ªëng k√™ ng∆∞·ªùi ch∆°i
            </h2>

            <div className="space-y-4 mb-8">
              {playerStats.map((player, idx) => (
                <motion.div
                  key={player.name}
                  className="bg-gradient-to-r from-pink-50 to-purple-50 p-6 rounded-2xl border-2 border-pink-200"
                  initial={{opacity: 0, x: -20}}
                  animate={{opacity: 1, x: 0}}
                  transition={{delay: idx * 0.1}}
                >
                  <div className="flex items-center justify-between mb-3">
                    <div className="flex items-center gap-3">
                      <div className="text-3xl">
                        {player.percentage === 100 ? 'üèÜ' : player.percentage >= 80 ? 'üåü' : player.percentage >= 60 ? 'üëç' : 'üí™'}
                      </div>
                      <div>
                        <h3 className="text-xl font-bold text-gray-800">{player.name}</h3>
                        <p className="text-sm text-gray-600">Tr·∫£ l·ªùi c√¢u: {player.questions.join(', ')}</p>
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="text-2xl font-bold text-pink-600">
                        {player.correct}/{player.total}
                      </div>
                      <div className="text-sm text-gray-600">
                        {player.percentage.toFixed(0)}% ƒë√∫ng
                      </div>
                    </div>
                  </div>

                  {/* Progress bar for each player */}
                  <div className="w-full bg-gray-200 rounded-full h-2 overflow-hidden">
                    <motion.div
                      className="bg-gradient-to-r from-pink-500 to-purple-600 h-2 rounded-full"
                      initial={{width: 0}}
                      animate={{width: `${player.percentage}%`}}
                      transition={{duration: 1, delay: idx * 0.1 + 0.5}}
                    />
                  </div>
                </motion.div>
              ))}
            </div>
          </motion.div>

          {/* Statistics Section */}
          <motion.div
            className="bg-white border-2 border-purple-200 rounded-3xl p-8 md:p-12 shadow-2xl"
            initial={{opacity: 0, y: 20}}
            animate={{opacity: 1, y: 0}}
            transition={{duration: 0.6, delay: 0.5}}
          >
            <h2 className="text-3xl font-bold text-purple-700 mb-6 text-center">
              üìä Chi ti·∫øt t·ª´ng c√¢u h·ªèi
            </h2>

            {/* Summary Stats */}
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-8">
              <div
                className="bg-gradient-to-br from-green-50 to-green-100 p-6 rounded-2xl border-2 border-green-200 text-center">
                <div className="text-3xl mb-2">‚úÖ</div>
                <div className="text-2xl font-bold text-green-700">{totalScore}</div>
                <div className="text-sm text-green-600">ƒê√∫ng</div>
              </div>

              <div
                className="bg-gradient-to-br from-red-50 to-red-100 p-6 rounded-2xl border-2 border-red-200 text-center">
                <div className="text-3xl mb-2">‚ùå</div>
                <div className="text-2xl font-bold text-red-700">{questions.length - totalScore}</div>
                <div className="text-sm text-red-600">Sai</div>
              </div>

              <div
                className="bg-gradient-to-br from-blue-50 to-blue-100 p-6 rounded-2xl border-2 border-blue-200 text-center">
                <div className="text-3xl mb-2">üìù</div>
                <div className="text-2xl font-bold text-blue-700">{questions.length}</div>
                <div className="text-sm text-blue-600">T·ªïng s·ªë c√¢u</div>
              </div>

              <div
                className="bg-gradient-to-br from-purple-50 to-purple-100 p-6 rounded-2xl border-2 border-purple-200 text-center">
                <div className="text-3xl mb-2">üéØ</div>
                <div className="text-2xl font-bold text-purple-700">{percentage.toFixed(0)}%</div>
                <div className="text-sm text-purple-600">ƒê·ªô ch√≠nh x√°c</div>
              </div>
            </div>

            {/* Detailed answers */}
            <div className="space-y-4">
              <h3 className="text-xl font-bold text-gray-800 mb-4">Chi ti·∫øt c√¢u tr·∫£ l·ªùi:</h3>

              {questions.map((q, idx) => {
                const record = answerRecords.find(r => r.questionId === idx);
                const userAnswer = record?.selectedAnswer ?? -1;
                const isCorrect = record?.isCorrect ?? false;
                const playerName = record?.playerName ?? "Ch∆∞a tr·∫£ l·ªùi";

                return (
                  <motion.div
                    key={q.id}
                    className={`p-6 rounded-2xl border-2 ${
                      isCorrect
                        ? 'bg-green-50 border-green-300'
                        : 'bg-red-50 border-red-300'
                    }`}
                    initial={{opacity: 0, x: -20}}
                    animate={{opacity: 1, x: 0}}
                    transition={{delay: idx * 0.1}}
                  >
                    <div className="flex items-start gap-4">
                      <div className="flex-shrink-0 text-3xl">
                        {isCorrect ? '‚úÖ' : '‚ùå'}
                      </div>
                      <div className="flex-1">
                        <h4 className="font-bold text-gray-800 mb-2">
                          C√¢u {idx + 1}: {q.question}
                        </h4>
                        <div className="space-y-2 text-sm mb-3">
                          <div className="flex items-center gap-2 text-purple-700">
                            <span className="font-semibold">üë§ Ng∆∞·ªùi tr·∫£ l·ªùi:</span>
                            <span className="font-bold">{playerName}</span>
                          </div>
                          <div className={`flex items-center gap-2 ${isCorrect ? 'text-green-700' : 'text-red-700'}`}>
                            <span className="font-semibold">ƒê√£ ch·ªçn:</span>
                            <span>{q.options[userAnswer]}</span>
                          </div>
                          {!isCorrect && (
                            <div className="flex items-center gap-2 text-green-700">
                              <span className="font-semibold">ƒê√°p √°n ƒë√∫ng:</span>
                              <span>{q.options[q.correctAnswer]}</span>
                            </div>
                          )}
                        </div>
                        {q.explanation && (
                          <div className="mt-3 p-3 bg-purple-50 rounded-lg border border-purple-200">
                            <p className="text-xs text-gray-700">
                              <span className="font-semibold">üí° Gi·∫£i th√≠ch:</span> {q.explanation}
                            </p>
                          </div>
                        )}
                      </div>
                    </div>
                  </motion.div>
                );
              })}
            </div>
          </motion.div>
        </main>
      </div>
    );
  }

  const question = questions[currentQuestion];

  return (
    <div className="font-sans min-h-screen p-8 pb-20 sm:p-20 bg-gradient-to-br from-pink-50 via-purple-50 to-pink-50">
      <main className="max-w-4xl mx-auto">
        <Link href="/event/20-10-2025" className="inline-block mb-8 text-purple-600 hover:underline">
          ‚Üê Quay l·∫°i Thi·ªáp m·ªùi
        </Link>

        {/* Header */}
        <motion.div
          className="text-center mb-8"
          initial={{opacity: 0, y: -20}}
          animate={{opacity: 1, y: 0}}
        >
          <h1
            className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-pink-600 to-purple-600 bg-clip-text text-transparent mb-4">
            üéØ C√¢u h·ªèi vui v·ªÅ 20/10
          </h1>
          <div className="flex justify-center items-center gap-4 text-lg text-gray-600">
            <span>C√¢u h·ªèi {currentQuestion + 1}/{questions.length}</span>
            <span>‚Ä¢</span>
            <span>ƒêi·ªÉm: {getTotalScore()}</span>
          </div>
        </motion.div>

        {/* Progress bar */}
        <motion.div
          className="w-full bg-gray-200 rounded-full h-3 mb-8 overflow-hidden"
          initial={{opacity: 0}}
          animate={{opacity: 1}}
        >
          <motion.div
            className="bg-gradient-to-r from-pink-500 to-purple-600 h-3 rounded-full"
            initial={{width: 0}}
            animate={{width: `${((currentQuestion + 1) / questions.length) * 100}%`}}
            transition={{duration: 0.5}}
          />
        </motion.div>

        {/* Question Card */}
        <motion.div
          className="relative bg-white border-2 border-pink-200 rounded-3xl p-8 md:p-12 shadow-2xl mb-8"
          key={currentQuestion}
          initial={{opacity: 0, x: 100}}
          animate={{opacity: 1, x: 0}}
          transition={{duration: 0.5}}
        >
          {/* Decorative elements */}
          <div className="absolute top-4 right-4 text-6xl opacity-10">üå∏</div>
          <div className="absolute bottom-4 left-4 text-5xl opacity-10">üíê</div>

          <h2 className="text-2xl md:text-3xl font-bold text-gray-800 mb-8">
            {question.question}
          </h2>

          {question.imageUrl && !question.isVideo && (
            <div className="mb-6">
              <Image
                src={question.imageUrl}
                alt="Question Image"
                width={220}
                height={220}
                className="flex item-center rounded-2xl border-2 border-pink-200"
              />
            </div>
          )}

          {question.isVideo && question.imageUrl && (
            <div className="mb-6">
              <motion.div
                className="bg-gradient-to-r from-purple-100 to-pink-100 p-6 rounded-2xl border-2 border-pink-300"
                initial={{opacity: 0, scale: 0.9}}
                animate={{opacity: 1, scale: 1}}
                transition={{duration: 0.6}}
              >
                <div className="flex flex-col items-center gap-4">
                  <div className="text-6xl">üé¨</div>
                  <p className="text-lg font-semibold text-gray-800 text-center">
                    Xem video ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y
                  </p>
                  <a
                    href={question.imageUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="px-8 py-4 bg-gradient-to-r from-purple-500 to-pink-500 text-white font-bold text-lg rounded-full shadow-lg hover:shadow-xl hover:from-purple-600 hover:to-pink-600 transition-all duration-300 transform hover:scale-105 flex items-center gap-2"
                  >
                    <span>‚ñ∂Ô∏è</span>
                    <span>M·ªü video</span>
                    <span>üîó</span>
                  </a>
                </div>
              </motion.div>
            </div>
          )}

          <div className={`space-y-4 ${question.isImageOptions ? 'grid grid-cols-2 gap-4' : ''}`}>
            {question.options.map((option, index) => {
              const isSelected = selectedAnswer === index;
              const isCorrect = index === question.correctAnswer;
              const showResult = selectedAnswer !== null;

              let bgColor = "bg-white hover:bg-pink-50";
              let borderColor = "border-gray-300";
              let textColor = "text-gray-800";

              if (showResult) {
                if (isCorrect) {
                  bgColor = "bg-green-100";
                  borderColor = "border-green-500";
                  textColor = "text-green-800";
                } else if (isSelected && !isCorrect) {
                  bgColor = "bg-red-100";
                  borderColor = "border-red-500";
                  textColor = "text-red-800";
                }
              }

              // N·∫øu c√≥ optionImages, hi·ªÉn th·ªã ·∫£nh
              if (question.isImageOptions && question.optionImages && question.optionImages[index]) {
                return (
                  <motion.button
                    key={index}
                    onClick={() => handleAnswerClick(index)}
                    disabled={selectedAnswer !== null}
                    className={`relative p-4 border-2 ${borderColor} ${bgColor} rounded-2xl transition-all duration-300 transform hover:scale-102 disabled:cursor-not-allowed ${textColor} overflow-hidden`}
                    initial={{opacity: 0, y: 20}}
                    animate={{opacity: 1, y: 0}}
                    transition={{delay: index * 0.1}}
                    whileHover={selectedAnswer === null ? {scale: 1.02} : {}}
                  >
                    <div className="relative">
                      <Image
                        src={question.optionImages[index]}
                        width={2000}
                        height={2500}
                        alt={option}
                        className="w-full h-auto object-cover rounded-lg mb-2"
                      />
                      <div className="absolute top-2 left-2 w-8 h-8 flex items-center justify-center bg-pink-200 text-pink-700 rounded-full font-bold">
                        {String.fromCharCode(65 + index)}
                      </div>
                      {showResult && isCorrect && (
                        <div className="absolute top-2 right-2 text-3xl">‚úÖ</div>
                      )}
                      {showResult && isSelected && !isCorrect && (
                        <div className="absolute top-2 right-2 text-3xl">‚ùå</div>
                      )}
                    </div>
                    <p className="text-sm font-semibold text-center mt-2">{option}</p>
                  </motion.button>
                );
              }

              // Hi·ªÉn th·ªã text nh∆∞ c≈©
              return (
                <motion.button
                  key={index}
                  onClick={() => handleAnswerClick(index)}
                  disabled={selectedAnswer !== null}
                  className={`w-full p-4 md:p-6 border-2 ${borderColor} ${bgColor} rounded-2xl text-left font-semibold text-lg transition-all duration-300 transform hover:scale-102 disabled:cursor-not-allowed ${textColor}`}
                  initial={{opacity: 0, y: 20}}
                  animate={{opacity: 1, y: 0}}
                  transition={{delay: index * 0.1}}
                  whileHover={selectedAnswer === null ? {scale: 1.02} : {}}
                >
                  <div className="flex items-center gap-4">
                    <span
                      className="flex-shrink-0 w-8 h-8 flex items-center justify-center bg-pink-200 text-pink-700 rounded-full font-bold">
                      {String.fromCharCode(65 + index)}
                    </span>
                    <span className="flex-1">{option}</span>
                    {showResult && isCorrect && <span className="text-2xl">‚úÖ</span>}
                    {showResult && isSelected && !isCorrect && <span className="text-2xl">‚ùå</span>}
                  </div>
                </motion.button>
              );
            })}
          </div>

          {/* Explanation */}
          {showExplanation && question.explanation && (
            <motion.div
              className="mt-8 p-6 bg-purple-50 border-2 border-purple-200 rounded-2xl"
              initial={{opacity: 0, height: 0}}
              animate={{opacity: 1, height: "auto"}}
              transition={{duration: 0.5}}
            >
              <h3 className="font-bold text-purple-800 mb-2 flex items-center gap-2">
                <span>üí°</span> Gi·∫£i th√≠ch:
              </h3>
              <p className="text-gray-700">{question.explanation}</p>
            </motion.div>
          )}

          {/* Name Input after answering */}
          {showNameInput && (
            <motion.div
              className="mt-8"
              initial={{opacity: 0, y: 20}}
              animate={{opacity: 1, y: 0}}
              transition={{duration: 0.5}}
            >
              <div className="bg-pink-50 border-2 border-pink-200 rounded-2xl p-6">
                <h3 className="font-bold text-pink-800 mb-4 flex items-center gap-2">
                  <span>‚úçÔ∏è</span> B·∫°n l√† ai?
                </h3>
                <div className="flex flex-col sm:flex-row gap-4">
                  <input
                    type="text"
                    value={currentPlayerName}
                    onChange={(e) => setCurrentPlayerName(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSubmitName()}
                    placeholder="Nh·∫≠p t√™n c·ªßa b·∫°n..."
                    className="flex-1 px-6 py-3 text-lg border-2 border-pink-300 rounded-full focus:outline-none focus:border-pink-500 focus:ring-2 focus:ring-pink-200 transition-all"
                    autoFocus
                  />
                  <button
                    onClick={handleSubmitName}
                    disabled={!currentPlayerName.trim()}
                    className="px-8 py-3 bg-gradient-to-r from-pink-500 to-purple-600 text-white font-bold text-lg rounded-full shadow-lg hover:shadow-xl hover:from-pink-600 hover:to-purple-700 transition-all duration-300 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none whitespace-nowrap"
                  >
                    {currentQuestion < questions.length - 1 ? "Ti·∫øp theo ‚Üí" : "Ho√†n th√†nh üéâ"}
                  </button>
                </div>
              </div>
            </motion.div>
          )}
        </motion.div>
      </main>
    </div>
  );
}
